@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject TodosStorage TodosStorage

@if (visible)
{  
    <h2 class="mt-md-1 mt-5 mb-2 text-center text-md-start pt-3 mx-md-4"> Add Todos</h2>

   
<!-- -->
<div class="form border-1">
  <div class="d-flex flex-sm-row flex-column w-75 mx-md-4 mx-auto mt-5 pt-2">
  <div class="form-group w-100 mb-3">
    <label for="categorySelect" class="form-label">Select Category</label>
    <select id="categorySelect" class="form-select" @bind="selectedCategoryId">
      <option value="" selected disabled>Select a category</option>
      @if (categories?.Any() == true)
      {
        @foreach (var category in categories)
        {
          <option value="@category.Id">@category.Id : @category.Name</option>
        }
      }
      else
      {
        <option value="" disabled>No categories available</option>
      }
    </select>
  </div>
</div>
<!---->
   

<div class="w-75 mx-md-4 mx-auto pt-2"> <label>Todo Title</label>
  <input type="text" @bind="newTodo" class="form-control" aria-label="Todo" placeholder="Enter a new todo..." @onkeydown="HandleEnter" />
</div>


<!-- -->

  <label class="px-4 mt-4">Due date</label>
  <div class="d-flex flex-sm-row flex-column w-75 mx-md-4 mx-auto  pt-2">

    <div class="form-group mb-3">
        <label for="daySelect" class="form-label  text-muted small">Day</label>
        <select id="daySelect" class="form-select" @bind="selectedDay">
         @for (int i = 1; i <= 31; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="monthSelect" class="form-label  text-muted small">Month</label>
        <select id="monthSelect" class="form-select" @bind="selectedMonth">
          @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="yearSelect" class="form-label  text-muted small">Year</label>
        <select id="yearSelect" class="form-select" @bind="selectedYear">
            @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++) 
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>
 </div>
    <div class=" px-4 mt-3">
        <button class="btn btn-success px-4 mt-sm-0 mx-auto mx-sm-0 custom-btn-width" type="button" @onclick="AddTodo">Add</button>
    </div>
</div>
<!-- End of form -->  

    @if (todos?.Count > 0 && todos?.Any(todo => !todo.IsCompleted) == true)
    {
        <ul class="list-group my-5 pt-2 mx-1 px-auto mx-auto mx-md-4 mb-5">
    <!-- Heading for MD and Above -->
    <li class="d-none d-md-flex list-group-item justify-content-between px-4 text-white text-justify"
        style="background-color:#0056b3">
        <span class="col-md-2 text-start">Due Date</span>
        <span class="col-md-3 mx-1 text-start">Category</span>
        <span class="col-md-5 mx-1 text-start">Title</span>
        <span class="col-md-2 text-end">Actions</span>
    </li>

            @{
                bool isFirstVisible = true;
            }
            @foreach (var todo in todos)
            { 
                if (!todo.IsCompleted) 
                {
<!-- Content -->
<li class="list-group-item  d-flex  flex-sm-row justify-content-md-between w-100 text-justify pe-0 m-0 p-3 border border-secondary text-wrap text-break @(isFirstVisible ? "border-top-1" : "border-top-0")"
    @key="todo.Id" tabindex="0">
           <div class="content col-sm-10 col-9">
            <div class="d-flex flex-column flex-md-row align-items-center my-auto">
            


        <!-- Due Date -->
            <span class="col-md-2 col-12 text-start text-muted small mb-md-0 my-auto">
            @(todo.DueDate.HasValue ? todo.DueDate.Value.ToString("dd/MM/yyyy") : "No due date")
             </span>
        
        <!-- Category -->
            <span class="col-md-3 col-12 text-start text-muted mx-md-1 mb-md-0 my-auto">
            @GetCategoryNameById(todo.CategoryId)
             </span>
        
        <!-- Title -->
            <span class="col-md-5 col-12 text-start text-middle mx-md-1 my-auto @(todo.Priority ? "text-danger" : "") ">
            @todo.Title
             </span>
        </div>
        </div>
        <!-- Actions -->
             <div class="actions col-sm-2 col-3 align-items-center my-auto ">

           <span class="d-flex flex-sm-row justify-content-end text-center  align-middle ms-sm-auto mr-auto my-auto py-auto" >
                <input class="form-check-input form-check cursor-pointer py-0" type="checkbox" value="" id="defaultCheck1" @onchange="async () => await ToggleAsync(todo)" unchecked />

            <button type="button" class="btn btn-sm" @onclick="() => ShowDeleteModalAsync(todo)">
                @emoji[2]
            </button>
        </span>
        </div>
</li>


                    isFirstVisible = false;
                }
            }
        </ul>
    }
}
else
{ 
    <CascadingValue Value="completedTasks">
        <DoneComponent OnTakeBack="HandleTakeBack"/>
    </CascadingValue>
}

<AlertModal @ref="alertModal" AlertMessage="@AlertMessage"  />
<ErrorModal @ref="errorModal" AlertMessage="@AlertMessage"  />

<DeleteModal @ref="deleteModal" AlertMessage="@AlertMessage"  OnConfirm="ConfirmDelete" />

@code {


    [Parameter] public bool visible { get; set; }  
    

    private string newTodo = string.Empty;
    private int? selectedCategoryId;
    private List<TodoItem> todos = new();
    private List<Category> categories = new();

    protected List<TodoItem>? completedTasks {get;set;}
    private List<char> emoji = new(){ (char)0x2610, (char)0x2705,(char)0x274C };

    private byte[] emojiBytes { get; set; } = Array.Empty<byte>();
    private string EmojiString => System.Text.Encoding.Unicode.GetString(emojiBytes);  
    
    //**-----------------------------------------------------------**//

     private int selectedDay;
    private int selectedMonth;
    private int selectedYear;

   private DateTime? dueDate;
    
    //**-----------------------------------------------------------**//
    
    private AlertModal? alertModal;
    private DeleteModal? deleteModal; 
    private ErrorModal? errorModal;        

    private string AlertMessage { get; set; }= string.Empty;
        private string? errorMessage;



    //**-----------------------------------------------------------**//

   

    protected override async Task OnInitializedAsync()
    {
        
        todos = await TodosStorage.GetTodosAsync();
         categories = await TodosStorage.GetCategoriesAsync();
        UpdateCompletedTasks();

        EmojiService.HighSurrogate=0xD83D;
        EmojiService.LowSurrogate=0xDD59;
        emojiBytes= EmojiService.GetEmojiBytes();
    }

    //**-----------------------------------------------------------**//
   private void ValidateDate()
  {
      try
      {
          var selectedDate = new DateTime(selectedYear, selectedMonth, selectedDay);

          if (selectedDate < DateTime.Now.Date)

          {
              errorMessage = "The selected date is in the past. Please choose a valid future date.";
            dueDate=null;
               ShowErrorMessage(errorMessage ?? "Please select a valid due date.");

            
          }
          else
          {
              errorMessage = string.Empty;
             dueDate=new DateTime(selectedYear, selectedMonth, selectedDay);
    
          }
      }
      catch (ArgumentOutOfRangeException)
      {
          errorMessage = "Invalid date. Please select a valid day, month, and year.";
            dueDate=null;
             ShowErrorMessage(errorMessage ?? "Please select a valid due date.");
      }

            
  }
  //**-----------------------------------------------------------**//

  private async Task AddTodo()
{
     
            ValidateDate();

    if (!string.IsNullOrWhiteSpace(newTodo) && selectedCategoryId.HasValue)
    {  

        
        var todo = new TodoItem
        {
            Title = newTodo,
            CategoryId = selectedCategoryId.Value,
            DueDate = dueDate,
            IsCompleted = false
        };

        try
        {
            await TodosStorage.AddTodoAsync(todo);
             ValidateDate();   
            todos = await TodosStorage.GetTodosAsync();

            newTodo = string.Empty;
            selectedCategoryId = null;

            UpdateCompletedTasks();
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error adding todo: {ex.Message}");
            await ShowErrorMessage("An error occurred while adding the todo. Please try again.");
        }
    }
    else
    {
        await ShowErrorMessage("Please select a category and enter a title.");
    }
}

          //**-----------------------------------------------------------**//

  
    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }

    private async Task ToggleAsync(TodoItem todo)
{
    todo.IsCompleted = !todo.IsCompleted;
    todo.TimeCompleted = todo.IsCompleted ? DateTime.Now : null;

    await TodosStorage.UpdateTodoAsync(todo);
    
    todos = await TodosStorage.GetTodosAsync();

    if (todo.IsCompleted)
    {
        await ShowCompletionAlert(todo.Title);
    }

    UpdateCompletedTasks();
}


    private async Task UpdateCompletedTasks()

    {       todos = await TodosStorage.GetTodosAsync();

        completedTasks = todos.Where(t => t.IsCompleted).ToList();
    }

   private async Task DeleteTodoAsync(TodoItem todo)
    {
    await TodosStorage.DeleteTodoAsync(todo.Id);
    await  UpdateCompletedTasks();
   }


    private string GetCategoryNameById(int id)
    {
        var category = categories.FirstOrDefault(c => c.Id == id);
        if (category != null)
        {
            return category.Name;
        }
        return string.Empty;
    }
      


    private async Task HandleTakeBack(TodoItem todo)
{
    todo.IsCompleted = false;
    todo.TimeCompleted = null;

    await TodosStorage.UpdateTodoAsync(todo);
    
    todos = await TodosStorage.GetTodosAsync();

    await UpdateCompletedTasks();
}

    
    
    //**-------------------------------------------------------------------------------------**//

    private async Task ShowErrorMessage(string message)
    {
        AlertMessage = message;
        
            await JSRuntime.InvokeVoidAsync("bootstrapInterop.showErrorModal", "errorModal");
        
        StateHasChanged(); 
    }
    
    private async Task ShowCompletionAlert(string title) 
        {
        AlertMessage = $"The task '{title}' has been marked as completed.";
        await JSRuntime.InvokeVoidAsync("bootstrapInterop.showAlertModal","alertModal"); 
        StateHasChanged(); 
        }

        private TodoItem? todoToDelete;

        private async Task ShowDeleteModalAsync(TodoItem todo)

        {   AlertMessage = "Are you sure you want to delete this todo?";
            todoToDelete = todo;
            await JSRuntime.InvokeVoidAsync("bootstrapInterop.showModal", "deleteModal");
        }

        private async Task ConfirmDelete()
        {
            if (todoToDelete != null)
            {
                await DeleteTodoAsync(todoToDelete);
                todoToDelete = null; 
            }
                await JSRuntime.InvokeVoidAsync("bootstrapInterop.hideModal", "deleteModal");
        }
  
  //**--------------------------------------------------------------------------------------------**//
  
}
