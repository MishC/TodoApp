@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject TodosStorage TodosStorage


<div class="accordion" id="addTodoAccordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="addTodoHeading">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#addTodoCollapse" aria-expanded="false" aria-controls="addTodoCollapse">
                Add Todo
            </button>
        </h2>
        <div id="addTodoCollapse" class="accordion-collapse collapse" aria-labelledby="addTodoHeading" data-bs-parent="#addTodoAccordion">
            <div class="accordion-body">
                <div class="form d-table mx-auto w-100 pb-5 my-auto">
                    <!-- Select Category -->
                    <div class="d-flex flex-sm-row mx-md-4 mt-5 w-75 mx-md-4 mx-auto">
                        <div class="form-group mb-1">
                            <label for="categorySelect" class="form-label">Select Category</label>
                            <select id="categorySelect" class="form-select" @bind="selectedCategoryId">
                                <option value="" selected disabled>Select a category</option>
                                @if (categories?.Any() == true)
                                {
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id" class="text-muted">@category.Id : @category.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled>No categories available</option>
                                }
                            </select>
                        </div>
                    </div>
                    <!-- Todo Title -->
                    <div class="w-75 mx-md-4 mx-auto pt-2 mb-3">
                        <label>Todo Title</label>
                        <input type="text" @bind="newTodo" class="form-control" aria-label="Todo" placeholder="Enter a new todo..." @onkeydown="HandleEnter" />
                    </div>
                    <!-- Due Date -->
                    <div class="w-75 mx-md-4 mx-auto pt-2 mb-3">
                        <label class="">Due date</label>
                        <div class="d-flex flex-row w-75 pt-2">
                            <div class="form-group mb-3">
                                <label for="daySelect" class="form-label text-muted small">Day</label>
                                <select id="daySelect" class="form-select" @bind="selectedDay">
                                    @for (int i = 1; i <= 31; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-3">
                                <label for="monthSelect" class="form-label text-muted small">Month</label>
                                <select id="monthSelect" class="form-select" @bind="selectedMonth">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-3">
                                <label for="yearSelect" class="form-label text-muted small">Year</label>
                                <select id="yearSelect" class="form-select" @bind="selectedYear">
                                    @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++)
                                    {
                                        <option value="@i">@i</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Add Button -->
                    <div class="add-button w-100 mt-4 px-sm-2 px-md-0 mx-sm-5 mx-md-4 mx-auto text-center text-sm-start d-sm-block">
                        <button class="btn btn-success px-5 mt-sm-0 my-auto custom-btn-width" type="button" @onclick="AddTodo">Add</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> OnShowError { get; set; }
    [Parameter] public EventCallback<TodoItem> OnTodoAdded { get; set; }

    private string newTodo = string.Empty;
    private int? selectedCategoryId;
    private int selectedDay;
    private int selectedMonth;
    private int selectedYear;
    private List<Category> categories = new();
    private DateTime? dueDate;

    protected override async Task OnInitializedAsync()
    {
        categories = await TodosStorage.GetCategoriesAsync();
    }

    private async Task ValidateDate()
    {
        try
        {
            var selectedDate = new DateTime(selectedYear, selectedMonth, selectedDay);

            if (selectedDate < DateTime.Now.Date)
            {
                await OnShowError.InvokeAsync("The selected date is in the past. Please choose a valid future date.");
                dueDate = null;
            }
            else
            {
                dueDate = selectedDate;
            }
        }
        catch (ArgumentOutOfRangeException)
        {
            await OnShowError.InvokeAsync("Invalid date. Please select a valid day, month, and year.");
            dueDate = null;
        }
    }

    private async Task AddTodo()
    {
        await ValidateDate();

        if (!string.IsNullOrWhiteSpace(newTodo) && selectedCategoryId.HasValue && dueDate != null)
        {
            var todo = new TodoItem
            {
                Title = newTodo,
                CategoryId = selectedCategoryId.Value,
                DueDate = dueDate,
                IsCompleted = false
            };

            await TodosStorage.AddTodoAsync(todo);
            newTodo = string.Empty;
            selectedCategoryId = null;

            await OnTodoAdded.InvokeAsync(todo);
        }
        else
        {
            await OnShowError.InvokeAsync("Please fill in all fields and ensure the date is valid.");
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }
}


