@page "/login"
@using System.ComponentModel.DataAnnotations;

<h3 class="mb-5 mt-2">Login</h3>
@if(!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="userLogin" OnValidSubmit="HandleLogin" class="d-flex flex-column" id="login">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="col-md-3 mb-3">
        <label class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="userLogin.Username"/>
    </div>
    <div class="col-md-3 mb-3">
        <label class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="userLogin.Password"/>
    </div>
    <button type="submit" class="btn btn-primary col-md-1 p-1">Login</button>
</EditForm>



@code{

    private UserLogin? userLogin = new UserLogin();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        bool success = await AuthService?.Login(userLogin?.Username?.Trim(), userLogin?.Password);
        if(success)
        {   
            navigation.NavigateTo($"/todos?userId={userLogin.Username}");
        }
        else
        {
            errorMessage = "Invalid user name or password. Try again.";
        }
    }


    private class UserLogin
    {
        [Required(ErrorMessage ="Username is required, please!")]
        [StringLength(20, ErrorMessage ="Username cannot exceed 20 characters")]
        public string? Username {get; set;}
        
        [Required(ErrorMessage ="Password is required, i wont let u go without it!")]
        public string? Password {get; set;}
    }
}
    